Atom ::= var
        |int
        |bool
        |"(" ")"
        |"(" Exp ")"
        |"(" Exp Exps ")"
Exps ::= "," Exp
        |"," Exp Exps
FExp ::= Atom FExp'
FExp' ::= (*empty*) 
        | Atom FExp'
LExp ::= FExp
   | "if" Exp "then" Exp "else" Exp
   | "\" var "->" Exp
   | "let" var "=" Exp "in" Exp
   | "loop" var "=" Exp "for" var "<" Exp "do" Exp
   | "loop" var "=" Exp "while" Exp "do" Exp
Exp7' ::=(* empty *)
       | "get" Atom
       | "put" Atom Atom 
Exp7 ::= LExp Exp7'
Exp6' ::= (* empty *)
       | Atom "." int
Exp6 ::= Exp7 Exp6'
Exp5' ::= (* empty *)
       | "*" Exp5
       | "/" Exp5
Exp5 ::= Exp6 Exp5'
Exp4' ::= (* empty *)
       | "+" Exp4
       | "-" Exp4
Exp4 ::= Exp5 Exp4'
Exp3' ::= (* empty *)
       | "==" Exp3
Exp3 ::= Exp4 Exp3'
Exp2' ::= (* empty *)
       | "&&" Exp2
Exp2 ::= Exp3 Exp2'
Exp1' ::= (* empty *)
       | "||" Exp1
Exp1 ::= Exp2 Exp1'
Exp := Exp1







--a trick: 如果是不知道写啥可以先用Atom替代，后面用recursive case来验证（尤其是优先级）
--验证的时候，并不是所有的分支都是有效的？可以允许无效的分支，毕竟是choice
-- 一点作业感悟：有时候看完整个文档会对当前问题产生更多理解呢，不要着急解决specific的问题，而是看下整体的意图。
-- 就像现实生活中的需求一样，一个小问题总是为了整体的解决服务的。

